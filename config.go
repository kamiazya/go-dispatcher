package dispatcher

// Default dispacher config.
// These values ​​can be changed from external packages.
//
// See Example Package (Variables)
var (
	// DefaultMaxWorkers is a number of
	// default setting of dispatcher max workers.
	DefaultMaxWorkers = 3

	// DefaultMaxQueues is a number of
	// default setting of dispatcher max queues of task.
	DefaultMaxQueues = 100

	// DefaultMaxRetry is a number of
	// default setting of worker max retry count if error occurred.
	DefaultMaxRetry = 0

	// DefaultLogger is a Logger that is set by default
	// in Config generated by the DefaultConfig.
	DafaultLogger Logger
)

// DafaultConfig returns defalt config.
func DafaultConfig() *Config {
	return &Config{
		MaxWorkers: DefaultMaxWorkers,
		MaxQueues:  DefaultMaxQueues,
		MaxRetry:   DefaultMaxRetry,
		Logger:     DafaultLogger,
	}
}

// Config has propaty of Dispatcher to generate.
type Config struct {
	// MaxWorkers is a number of
	// setting of dispatcher max workers.
	MaxWorkers int

	// MaxQueues is a number of
	// setting of dispatcher max queues of task.
	MaxQueues int

	// MaxRetry is a number of
	// setting of worker max retry count if error occurred.
	MaxRetry int

	// Logger is user custom logger
	// impliments Logger interface.
	Logger
}

// GenerateFromConfig ganarates a Dispatcher from Config.
func GenerateFromConfig(c Config) (Dispatcher, error) {

	// check invalid setting
	if c.MaxWorkers <= 0 {
		return nil, ErrInvalidSetting
	} else if c.MaxQueues < 0 {
		return nil, ErrInvalidSetting
	} else if c.MaxRetry < 0 {
		return nil, ErrInvalidSetting
	}

	d := &dispatcher{
		config:    c,
		logger:    c.Logger,
		hasLogger: (c.Logger != nil),

		quit:    make(chan struct{}),
		workers: make([]*worker, c.MaxWorkers),
		pool:    make(chan *worker, c.MaxWorkers),
		queue:   make(chan Task, c.MaxQueues),
	}

	for i := 0; i < cap(d.pool); i++ {
		// create worker
		d.workers[i] = d.createWorker()
	}
	return d, nil
}
